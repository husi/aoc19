
def pattern_generator(multiplier):
    base = [0,1,0,-1]
    pos = 0
    counter = 0
    while True:
        yield(base[pos])
        counter += 1
        pos = (pos + counter//multiplier) % 4
        counter %= multiplier

s1 = '12345678'
s2 = '80871224585914546619083218645595'
s3 = '19617804207202209144916044189917'
s4 = '69317163492948606335995924319873'
s= '59734319985939030811765904366903137260910165905695158121249344919210773577393954674010919824826738360814888134986551286413123711859735220485817087501645023012862056770562086941211936950697030938202612254550462022980226861233574193029160694064215374466136221530381567459741646888344484734266467332251047728070024125520587386498883584434047046536404479146202115798487093358109344892308178339525320609279967726482426508894019310795012241745215724094733535028040247643657351828004785071021308564438115967543080568369816648970492598237916926533604385924158979160977915469240727071971448914826471542444436509363281495503481363933620112863817909354757361550'

signal = [int(c) for c in s]

def compute(signal):
    def digit(i,signal):
        generator = pattern_generator(i)
        next(generator) # skip one
        return abs(sum([p*i for p,i in zip(generator, signal)]))%10

    return [digit(i,signal) for i in range(1,len(signal)+1)]


if __name__ == '__main__':
    for i in range(100):
        signal = compute(signal)
        print(i,signal[0:8])


